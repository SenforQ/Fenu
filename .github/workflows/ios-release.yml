name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: MIIMiQIBAzCCDFAGCSqGSIb3DQEHAaCCDEEEggw9MIIMOTCCBs8GCSqGSIb3DQEHBqCCBsAwgga8AgEAMIIGtQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQI3MY4zkFCf6cCAggAgIIGiIvD7ith6FCfQYHa1vqXBZoSz8L6iwaFA32XcB5YxznVEjNrLy5uSRkcdGQQsShdDH2FTdVP6UK0bM09LXb/yh7/ZiOrBvTTjcSqWsgoMiZxkwVC+Uxz01pG3BxBlaYnWNXhxqw3lpkyc0AUVn4jTthLUX3gvy2z8fuh3JzAQaPNrjijPV6M7JenyN9ZjbScAvSvFj4/2sNM38IP9HkqTuKy/KhQpbERdGgsGug+jLGFrfVVlTwsmsOlVYcpRzQb3kH+wV49OkeyKupgbmiMYjiVXpg2F7imAFTRsIIYupcx5uPgjGacsj+vbUtN3sDa1Yg1nQF+EjqKihdP3a7yhxYnMV0OnR3ON6IVsXLVjrHsMoOjviLWaOM/a0slWKlSXtqrrO3WZK4n1e08IGxmueYBjYyZ1QBLMOddEUgL/s6I5Tm1k4P+/+ZZgRCt9uKncIgs09TOu3lrtiYFJgmVwMpKXqQRsLBoTK1tdasZPsoxJPDCOLs5ZsGmgGsvIWGH/kp9pDyneZ4O+fZtfrPQzUOgC5h/8ILrYwfqGP4uyueuY01NnAGMkNH1Rz42UjsJLYcKH53pkz8wh4kxcr9ghqg9xtTUzvg1bu/Pj2TJENrJiY0lLIFaH4iamOKDqdFG4g+9mc6TUFm4V9DrJBkBRpBvmu0pdhfNv18wpJL0gvH6K2xDGJXwgGYlUkMOxWySlLKC71djHZfljOXBMEUp6QurV5kxqZkE46MB5lScT8Z5UO9MWhbPLto20DUJ+NA7ZX/THSTMtSWSqMw4TxDF/6VpNLB0PkpHoF+skmpU2iBuL6BdFMta2ZMVTRN2T4xNc0JXga12gNbi9Q3yu3Tt9rLkXuREee8dpLMh7Fv06PTrUfgvUfTftZq+/XP5ALJzZ96dSDEJxIAqw8Hif/FcnCcw+6rIYeBrm9Pkti4VOQZTOhEcK/7WbAYe++e0ocb/KAogA7hCUDG/DCUzwc+ENOyObKWHi6AzFGD+qbFvmVXjX4YRnn6m0SDtX891V8376QIGOxz5oR/uX5m4ACFJ7xWktuZkucPlYOnjxk/m3G6L7IFjiFhaDFq7MVfwTxQgKq30keSdCR2i8eMkJCk+ze5WmcWrwDduY+u6hvjarZZUi3ULhfJbFHeLEnZ/4tWGAn2EtFuWvCCDlZjk4PP4Sp7c1WrX8fmHjDnZzBdBAXbIjaPFOZpqO/M4+omiodhsMWpZ6wMjUAFbLsU5ig27/UbxcY+YzBInvDa3xo+Eqgr0cCOpiM/RV/oUz68d6Gk+ZggyuACD9imFVuf0zpcJN/rRbOy/3WlBGDb00t0fUMeVrueo1obR6dLrf2scfEcBKX4Jb72fLMHrU3+/9aGBRhiVJ0fi/AuvwD/A5DBlrxmKIsqEZY5zgymQwLNPIB4OzlijBBbw0+7Uyp7l/zm/1QGzJ/7Mg7QwP/v0HRaN1rikqm9MWLPHyLSRJ1sgWhfKodBmQNboUZtAEqUeRh1Oag37dGeXylolUv7WLuPUlc45aYg5yAahhYq/4EIsgEkjnYQNQatNAu1CEEjHrXAnKhrMe691uwheDFtRrCArjEpE7bvFUHyn2vtoC8rS1nB4DkDh7WpcrghhyM51dgsBjdiXzZV/k2jDDRh3q3uZaTkVyfLkMuodFruc5ZgIua4CzGr05cjEsQeIN9ZvKVdCPgm6nm73HzaWa+mretGf2RfOBKTBvnRqAR30/mr/6lD3iwKnVGRfL+kjOufNx7bELyYutsxrSTjqZMRkPpbjhOeg8b9eIRYbph3X5v6uI1m7a6qg21LmCP+HHULoNXh8J9E1v3xJQrOQvPQ1xY4VHM8LoLe9/WSOfNUNrOn0c+ha5HNKnyf5gXH4n5hjX3N6ELv/bWea98XiCh+IDc55zrgrmMnRBRp6+Z/RGqGLaPfxrgasjXaMlnJrgVe0aHbNnqte0PcZnDWJssbeaeupFG+1c8RUHUoXTPYCSkG9ow0EmYRQ3FGj4jhMgahx7zaDjQgq5MMO0KgFBUoT6KqeK54tg9igOaLR+1b4Z6OdRjBn+Dnuw+l/LvXfqKPH8QPi3SafrjYJss0kv3RLL3IyxOrrK2/AFhtoQ7dAME5j6uBY4LzWd6aADKbjpCh29FlOd0VobymAUhSFuUgGpxnFtWBLSwu0nHrhl8KZZj2KpctblmfAm2LqToydCc5oNTXOyjZeMe4YzFuan342IhZAM7w2xdTOI3AIqgMwggViBgkqhkiG9w0BBwGgggVTBIIFTzCCBUswggVHBgsqhkiG9w0BDAoBAqCCBO4wggTqMBwGCiqGSIb3DQEMAQMwDgQIducvdkv2o/sCAggABIIEyMCbKuDc4gvMeBiCy2QdsBAtQU9kYZwjmFA694hGQQE+xKLtOjiziXzSve6ag1IfD9qSNLvFWE/Cj2QZ5pWIdwg9dAKQL8x6hlCxyX2noGD1X49mNgQlQcwIHK/tbl1Ou2tbTCGzHg56B8uODp7tJ/V45qbX8Tug9GvMSEA/UzXf7AzGD2dfUhTDvdwp8roPxCgsa6JVtRrpXLHP833hpPpIdimNnlxXu2p2y/RelL9WtV+TGbB220BhmNA8wNdKxol8bI2JmD/Gk2TcGkqshOyrknK6ryuDYR1vCsn6UIuALR8ZtEd835RuuNGvwLVP4CoD1tIvNJUEavT1808/K1iMPqtW71GzH3R6H6YzHtXpNQAOKO/XpBrrHWfmhUQIRDU+EhKdRSDl8/G2DC5Xdaqi1XQe6aDhAOw1mnyA15NhweNpUaf9KmSqPr47/GLZGmMO6KHV4W30dJD85zP5HZ1/v3hzz+WgI2a+Y1yToW+M0AWWWMyAGcoV0VfOBaAPnHccyXXamrIq7O+T8tTRv8OXVP+nghxkL9+0Kp4kseKYGB/JNjg+ZzzUbFodiKW38kVoWWL4JfG+yIUCoFVMckLIKyNOpdvXaYDF/sr15uWtOQOZ4VdTVjA30l9YqTCNAhBQdqaZaOkpM+IbYf1Qfsg8JgxpJ/Pz+1yYr6IRxR335/mmB1fF+yxz5N3Tfo34hY+2dJOCwsewsnUn7aOrX0sG78RiV6kUu+i2XSxdK5eJgjfCtZDBSkyEiXoPA8r/FWo8F5fyX3zX0gKjJ8ebmWXYwSTxKIV+fiA0lijtewwVyf5GaawmN65Xlo7pdv3LYF6bvNXQsjkZnW0ehw8CMfpKlAVLyy5AcUlJegYMQYBCwISeI4pKKgkjpdAp79Uuw5iFKu7eLa1dTlWWfCCBXSZ9hhsbivIjq/N86FJv/G8EXhMiiYM/JGLIHJxmQCYaJWISfk1gZg8SZoL35jwd4ISVTqw2DzSCbpvqZdg37zVv+R0lySC3dThp1riJg1iNwwUxThhNlC9sDwRwpTxpV2wlGML0hCRxRfwog5lS8ARlCpFrCN/KMzuB3TpUomloCO20ROpHODG4b6doVMH8SifgwBjzrginB495JWGz3gwo38DFbEldPrRMF8+k4XpSALKaakB7vLrT+kW0kQ52fk525ujwtDhah6J0qpzb6e518UNyt/TKwdrYE+1xT8FOiW3onD0oaghaVLLWPeEJwwpLUXH305KrvNkLqBBU3BYq3v7zsuaX9jWAhrsPq177UO7nzxtuMbi4fF4fVOQczgwrNaAiPeIhCxKwHdqhgKGL1ozvPzi8u42rfq+8qsUHpETS3TFFoZTtWkJ3VSIPlq90LqyRcCVEl1D+sUMiBepg3xC651TP3NaGOYeR1uaZ79CjrmfBw8PL/utGPzAN2XMRW8v54hwEllclYRS4IU00T7PCOkkVAaZqdZLqbHVyK+e+xFWS0LTb8np3NHasR/25fui/I7rVSqu3WHAuTCoIgRJx+wpyvr4CKgxMteUoFq/z4/ATRc+2W/oxOZFGt/6Mm/6yVkEJ9z9Mk1p2ZCMySzHl/YDzLMHsx9ydH/Lxia5SoVxwhpRpmuTgrXTuUyVyCvS8s4zIuzFGMB8GCSqGSIb3DQEJFDESHhAAYQBkAG0AaQBuADAAMAA3MCMGCSqGSIb3DQEJFTEWBBQcGqAc4JSJD0FsBFULSl/r4nzhwjAwMCEwCQYFKw4DAhoFAAQU7UCMygPM+sOTjiVc9My/a87+k/kECByRql1XM2KAAgEB
          
          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/fenu.ipa"
          APPLE_ID: "qinchaoyong@vincentservice.shop"
          APP_SPECIFIC_PASSWORD: "owio-pnpv-tube-rxiy"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
